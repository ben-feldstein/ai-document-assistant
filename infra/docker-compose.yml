version: '3.9'

services:
  # API Service
  api:
    build: 
      context: ..
      dockerfile: infra/Dockerfile.api
    container_name: ai-document-api
    command: uvicorn api.app:app --host 0.0.0.0 --port 8000 --workers 1 --proxy-headers
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg://user:pass@postgres:5432/proxi
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key-here}
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - STT_PROVIDER=whisper
      - DEBUG=false
    volumes:
      - ../api:/app/api
      - ../requirements.txt:/app/requirements.txt
    depends_on:
      - postgres
      - redis
    networks:
      - ai-document-network
    restart: unless-stopped

  # Worker Service
  worker:
    build: 
      context: ..
      dockerfile: infra/Dockerfile.worker
    container_name: ai-document-worker
    command: python -m worker.main
    env_file:
      - ../.env
    environment:
      - DATABASE_URL=postgresql+psycopg://user:pass@postgres:5432/proxi
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-}
      - EMBED_MODEL=${EMBED_MODEL:-all-MiniLM-L6-v2}
      - EMBED_DIMS=${EMBED_DIMS:-384}
    volumes:
      - ../worker:/app/worker
      - ../api:/app/api
      - ../requirements.txt:/app/requirements.txt
    depends_on:
      - postgres
      - redis
    networks:
      - ai-document-network
    restart: unless-stopped

  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ai-document-postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=proxi
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - ai-document-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d proxi"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-document-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-document-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-document-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-document-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-document-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ai-document-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-document-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - ai-document-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-document-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
